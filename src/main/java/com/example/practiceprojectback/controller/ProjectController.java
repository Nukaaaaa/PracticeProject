package com.example.practiceprojectback.controller;

import com.example.practiceprojectback.model.Project;
import com.example.practiceprojectback.model.User;
import com.example.practiceprojectback.service.ProjectService;
import com.example.practiceprojectback.service.ColumnService;
import com.example.practiceprojectback.service.TagService;
import com.example.practiceprojectback.service.UserService;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Controller
@RequiredArgsConstructor
@RequestMapping("/projects")
public class ProjectController {

    private final ProjectService projectService;
    private final ColumnService columnService;
    private final UserService userService;
    private final TagService tagService;

    // üìå –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    @GetMapping
    public String listProjects(Model model, Authentication authentication) {
        List<Project> projects = projectService.getAllProjects();
        model.addAttribute("projects", projects);
        model.addAttribute("project", new Project()); // –¥–ª—è —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è

        if (authentication != null) {
            // üîç –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤–µ—Ä–Ω—ë—Ç Spring Security
            System.out.println("‚ö° Authentication name: " + authentication.getName());

            User currentUser = userService.findByEmail(authentication.getName());
            if (currentUser != null) {
                model.addAttribute("role", currentUser.getRole());
                model.addAttribute("user", currentUser);
            } else {
                System.out.println("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ email: " + authentication.getName());
                model.addAttribute("role", "USER");
            }
        } else {
            model.addAttribute("role", "USER");
        }

        return "project/list";
    }



    // üìå Kanban-–¥–æ—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    @GetMapping("/{id}/board")
    public String projectBoard(@PathVariable Long id, Model model, Authentication authentication) {
        Project project = projectService.getProjectById(id);
        model.addAttribute("project", project);
        model.addAttribute("columns", columnService.getColumnsByProject(id));
        model.addAttribute("tags", tagService.getTagsByProject(id));

        if (authentication != null) {
            System.out.println("‚ö° Authentication name: " + authentication.getName());

            User currentUser = userService.findByEmail(authentication.getName());
            if (currentUser != null) {
                model.addAttribute("role", currentUser.getRole());
                model.addAttribute("user", currentUser);
            } else {
                System.out.println("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ email: " + authentication.getName());
                model.addAttribute("role", "USER");
                model.addAttribute("user", null); // üëà –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å
            }
        } else {
            model.addAttribute("role", "USER");
            model.addAttribute("user", null); // üëà –¥–æ–±–∞–≤–ª—è–µ–º user –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        }

        return "project/board";
    }

    // üìå –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    @PostMapping
    public String createProject(@ModelAttribute Project project, Authentication authentication) {
        if (authentication != null) {
            User currentUser = userService.findByName(authentication.getName());
            project.setOwner(currentUser); // ‚úÖ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        }
        projectService.createProject(project);
        return "redirect:/projects";
    }

    // üìå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è ADMIN)
    @PostMapping("/{id}/delete")
    public String deleteProject(@PathVariable Long id, Authentication authentication) {
        if (authentication != null) {
            User currentUser = userService.findByName(authentication.getName());
            if ("ADMIN".equals(currentUser.getRole())) { // –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
                projectService.deleteProject(id);
            }
        }
        return "redirect:/projects";
    }
}
